# circleCIのバージョン指定
version: 2
# jobsの設定（実際に実行するコマンド郡）
jobs:
  build:
    # machine:
    #   image: circleci/classic:edge
    docker:
      - image: circleci/ruby:2.7.2
        # auth:
        #   username: mydockerhub-user
          # password: password
        environment:
          DB_HOST: 127.0.0.1
          RAILS_ENV: test
      - image: circleci/mysql:5.7.35
        # auth:
        #   username: mydockerhub-user
        #   password: password
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: passw0rd

      working_directory: ~/textboox  #自身のアプリディレクトリ名を設定  


    steps:
    - checkout

    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "Gemfile.lock" }}
        - v1-dependencies-

    - run:
        name: install dependencies
        command: |
          gem install bundler -v 2.0.2
          bundle install --jobs=4 --retry=3 --path vendor/bundle

    - save_cache:
        paths:
        - ./vendor/bundle
        key: v1-dependencies-{{ checksum "Gemfile.lock" }}

    # Database setup
    - run: mv ./config/database.yml.ci ./config/database.yml

    # Database setup
    - run:
        name: Databasesetup
        command: |
           bundle exec rake db:create
           bundle exec rake db:schema:load

#     steps:
# # テストを実行
#       - checkout
#       - run:
#       # Our primary container isn’t MYSQL so run a sleep command until it’s ready.
#           name: MySQL が準備できるまで待機
#           command: |
#             for i in `seq 1 10`;
#             do
#               nc -z 127.0.0.1 3306 && echo Success && exit 0
#               echo -n .
#               sleep 1
#             done
#             echo Failed waiting for MySQL && exit 1
#       - run:
#           name: docker-compose build
#           command: docker-compose build
#       # - run:
#       #     name: create network
#       #     command: docker network create textboox-network
#       - run:
#           name: restart
#           command: docker-compose up -d
#       # Database setup
#       - run: docker-compose exec web sh -c 'bundle exec rake db:create'
#       - run: docker-compose exec web sh -c 'bundle exec rake db:schema:load'
#       - run:
#           name: test
#           command: docker-compose exec web sh -c 'bundle exec rspec'
#       - run:
#           name: docker-compose down
#           command: docker-compose down
# EC2にSSH接続し、デプロイを実行
  deploy:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      # CircleCIに登録した秘密鍵を呼び出す。
      - add_ssh_keys
      - run:
          ssh ${USER_NAME}@${HOST_NAME} 'cd textboox && sudo git pull origin master && docker-compose restart'


# 定義したjobsをどう動かすか設定する
# テストが成功した場合のみ、deployを実行するようにします。
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
      # CircleCI上で設定した環境変数を呼び出し
          context: textboox
          requires:
            - build
          # masterブランチがpushされた場合のみdeployするようにする。
          filters:
            branches:
              only: master















